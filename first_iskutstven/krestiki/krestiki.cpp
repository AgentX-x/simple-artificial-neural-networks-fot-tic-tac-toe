// krestiki.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream> //Стандартная библиотека ввода-вывода
#include <cstring> //Стандартная библиотека для работы со строками
#include <cstdio>
#include <fstream>
#include <ctime>
#include <cmath>

using namespace std;

char win = '-'; //Символ победы ("-" - ничья, "Х" - первого игрока, "О" - второго)
char PlayerName1[80], PlayerName2[80]; //Переменные для имен игроков
char cells[9] = { '-','-','-','-','-','-','-','-','-' };//Здесь будут хранится данные о ячейках
double** gg = new double*[9];
int errmove = 0;

double oneWeight_0_1[9][27] =
{
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5}
};

double twoWeight_0_1[9][27] =
{
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5},
{0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5, 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5 , 0.5}
};


// show_cells////
//функция не имеет возвращающего типа, потому что она просто выводит поле
//system("cls") системная функция, которая очищает экран для того чтобы выглядело солидно

void wrongMove( double expected)
{
	for (int i = 0; i < 9; i++)
	{
		if (gg[i] == nullptr)
		{
			i--;
			double error = gg[i][29] - expected;
			double delta = error * gg[i][28] * (1 - gg[i][28]);
			for (int j = 0; j < 27; j++)
			{
				if (i % 2 == 1)
					oneWeight_0_1[(int)gg[i][27]][j] = oneWeight_0_1[(int)gg[i][27]][j] - gg[i][j] * delta * 0.1;
				else
					twoWeight_0_1[(int)gg[i][27]][j] = twoWeight_0_1[(int)gg[i][27]][j] - gg[i][j] * delta * 0.1;
			}
			delete gg[i];
			gg[i] = nullptr;
			break;
		}
	}
}
int choseCell(double onetwow[9][27])
{
	double Weight_0_1[9][27];
	for (int i = 0; i < 9; i++)
		for (int j = 0; j < 27; j++)
		{
			if (cells[j / 3] == '-')
				Weight_0_1[i][j] = onetwow[i][j] * 1;
			else
				Weight_0_1[i][j] = onetwow[i][j] * 0;
			j++;
			if (cells[j / 3] == 'X')
				Weight_0_1[i][j] = onetwow[i][j] * 1;
			else
				Weight_0_1[i][j] = onetwow[i][j] * 0;
			j++;
			if (cells[j / 3] == 'O')
				Weight_0_1[i][j] = onetwow[i][j] * 1;
			else
				Weight_0_1[i][j] = onetwow[i][j] * 0;
		}

	double outPut[9] = {};

	for (int i = 0; i < 9; i++)
		for (int j = 0; j < 27; j++)
		{
			outPut[i] += Weight_0_1[i][j];
		}

	for (int i = 0; i < 9; i++)
		{
			outPut[i] = 1 / (1+ exp(-outPut[i]));
		}
	double max = 0;
	for (int i = 0; i < 9; i++)
	{
		if (outPut[i] > max)
			max = outPut[i];
	}
	int index;
	do

		index = rand() % 9;

	while (outPut[index] != max);
	
	for (int i = 0; i < 9; i++)
		if (gg[i] == nullptr)
		{
			gg[i] = new double[29];
			
			for (int j = 0; j < 27; j++)
			{
				if (cells[j / 3] == '-')
					gg[i][j] = 1;
				else
					gg[i][j] = 0;
				j++;
				if (cells[j / 3] == 'X')
					gg[i][j] = 1;
				else
					gg[i][j] =  0;
				j++;
				if (cells[j / 3] == 'O')
					gg[i][j] =  1;
				else
					gg[i][j] =  0;
			}
			gg[i][27] = index;
			gg[i][28] = outPut[index];
			break;
		}
	return index+1;

}


void show_cells() {
	system("cls");

	cout << "Числа клеток: \n";
	cout << "-" << 1 << "-" << "|" << "-" << 2 << "-" << "|" << "-" << 3 << "-" << endl;
	cout << "-" << 4 << "-" << "|" << "-" << 5 << "-" << "|" << "-" << 6 << "-" << endl;
	cout << "-" << 7 << "-" << "|" << "-" << 8 << "-" << "|" << "-" << 9 << "-" << endl;

	cout << "Текущая ситуация (---пустой):\n" << endl;
	cout << "-" << cells[0] << "-" << '|' << "-" << cells[1] << "-" << '|' << "-" << cells[2] << "-" << endl;
	cout << "-" << cells[3] << "-" << '|' << "-" << cells[4] << "-" << '|' << "-" << cells[5] << "-" << endl;
	cout << "-" << cells[6] << "-" << '|' << "-" << cells[7] << "-" << '|' << "-" << cells[8] << "-" << "\n" << endl;

}

// make_move///////
void make_move(int num) {/*это функция тоже ничего не возвращает, но у нее есть аргумент - номеригрока, который будет делать ход*/
	if (num == 1) cout << PlayerName1;
	else cout << PlayerName2;
	int cell;
	cout << ",введите номер ячейки,сделайте свой ход:";
	if (num == 1)
		cell = choseCell(oneWeight_0_1);
	else
		cell = choseCell(twoWeight_0_1);
	//    cout << "/n";

		//Нужно сделать проверку на не занятость клеток
	while (cell > 9 || cell < 1 || cells[cell - 1] == 'O' || cells[cell - 1] == 'X')
	{
		cout << "Введите номер правильного ( 1-9 ) или пустой ( --- ) клетки , чтобы сделать ход:";
		errmove++;
		if (num == 1)
		{
			wrongMove(0);
			cell = choseCell(oneWeight_0_1);
			
		}
		else
		{
			wrongMove(0);
			cell = choseCell(twoWeight_0_1);
		}
		cout << "\n";
	}
	//Первый игрок играет "крестиками", а второй - "ноликами"
	if (num == 1) cells[cell - 1] = 'X';
	else cells[cell - 1] = 'O';
}



char check()
{
	for (int i = 0; i < 3; i++) //Для победы нужны 3 клеточки
	{
		if (cells[i * 3] == cells[i * 3 + 1] && cells[i * 3 + 1] == cells[i * 3 + 2] && cells[i * 3] != '-') //Комбинации для победы вычисляются по
			return cells[i]; //разным формулам, эта - по горизонтали
			//0-1-2, 3-4-5 и 6-7-8
			//нумерация в массиве начинается с 0
		else if (cells[i] == cells[i + 3] && cells[i + 3] == cells[i + 6] && cells[i + 3] != '-') //Вертикальная
			return cells[i]; //0-3-6, 1-4-7 и 2-5-8
		else if ((cells[2] == cells[4] && cells[4] == cells[6]) || (cells[0] == cells[4] && cells[4] == cells[8]))
			return cells[i]; //И по диагонали: 0-4-8 и 2-4-6
	}
	for (int i = 0; i < 9; i++)
		if (cells[i] == '-')
			return 'c';
	return '-'; //Иначе - ничья
}

void result() {
	if (win == 'X')
		cout << PlayerName1 << "вы  выиграли поздравляем " << PlayerName2 << " а вы проиграли..." << endl;
	else if (win == 'O') cout << PlayerName2 << "вы  выиграли поздравляем  " << PlayerName1 << " а вы проиграли..." << endl;
	if (win == '-')
		cout << "Ничья \n ";

}


void writeDataForOne()
{
	std::ofstream out;          // поток для записи
	out.open("DataForOne.txt"); // окрываем файл для записи
	if (out.is_open())
	{
		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 27; j++)
				out << oneWeight_0_1[i][j] << std::endl;

		cout << "Yes \n";
	}
	else
		cout << "Not \n";
	out.close();
}

void writeDataForTwo()
{
	std::ofstream out;          // поток для записи
	out.open("DataForTwo.txt"); // окрываем файл для записи
	if (out.is_open())
	{
		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 27; j++)
				out << twoWeight_0_1[i][j] << std::endl;

		cout << "Yes \n";
	}
	else
		cout << "Not \n";
	out.close();
}
void readDataForOne()
{
	std::ifstream in("DataForOne.txt");
	if (in.is_open())
	{
		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 27; j++)
				in >> oneWeight_0_1[i][j];
	}
	in.close();
}

void readDataForTwo()
{
	std::ifstream in("DataForTwo.txt");
	if (in.is_open())
	{
		for (int i = 0; i < 9; i++)
			for (int j = 0; j < 27; j++)
				in >> twoWeight_0_1[i][j];
	}
	in.close();
}


void yuppi()
{

}

int main(int argc, char** argv) {

	srand(time(0));

	//Вводить имена пользователей//////
	/*Функция gets использована для ввода имен игроков с пробелами, в ином случае имя показывалось бы до первого пробела*/
	/*Функция из cstring для проверки разности строк она возвращает 0, если строки равны*/
	setlocale(LC_ALL, "Russian");
	for (int i = 0; i < 9; i++)
	{
		gg[i] = nullptr;
	}
	
	do {
		cout << "Введите имя первого игрока : ";
		PlayerName1[0] = 'O';
		PlayerName1[1] = 'n';
		PlayerName1[2] = 'e';
		cout << "Введите имя второго игрока: ";
		PlayerName2[0] = 'T';
		PlayerName2[1] = 'w';
		PlayerName2[2] = 'o';
		cout << "\n";
	} while (!strcmp(PlayerName1, PlayerName2));
	// //////////////////////////////////////////
	show_cells();

	for (int move = 1; move <= 9; move++) {
		if (move % 2) make_move(1); //Если ход нечетный, то остаток от деления на будет равен 1 (то есть true)
		else make_move(2);//Если четный, то 0 (false). Тогда если ход нечетный ходит первый игрок

		show_cells();
		//Если номер хода 5 или больше, то проходит проверка на победу (раньше, чем на 5-ом ходе победить нельзя)
		if (move >= 5)
		{
			win = check();
			if (win == 'c')
				continue;
			if (win != '-')
				break;
		}
		//Цикл закончился и ничто не победил - ничья

	}

	result();

	cout << errmove << endl;
	writeDataForOne();
	writeDataForTwo();
	//system("pause");
	return 0;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
